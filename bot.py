from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultArticle
from SQLighter import SQLighter
import time
import os
import statfuncs
import random
import utils
import config
import cat

class SetCategory(StatesGroup):
    available_categories = ['–≤—Å–µ','—Ä–æ–∫','–ø–æ–ø','—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ','—Å—Ç–∞—Ä—ã–µ']
    waiting_for_category_name = State()
    waiting_for_name = State()



bot = Bot(config.token)
dp = Dispatcher(bot , storage=MemoryStorage())

@dp.message_handler(commands=['victorina'])
async def getvic(message: types.Message):
  argument = message.get_args()
  if argument.lower() not in SetCategory.available_categories:
      await bot.send_message(message.chat.id , "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üéº")
      return
  if not argument:
      row = statfuncs.getrandomsong('music.db')
  if argument.lower() == '–≤—Å–µ':
      row = statfuncs.getrandomsong('music.db')
  if argument.lower() == '—Ä–æ–∫':
      row = statfuncs.getrandomsong('rock.db')
  if argument.lower() == '–ø–æ–ø':
      row = statfuncs.getrandomsong('pop.db')
  if argument.lower() == '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ':
      row = statfuncs.getrandomsong('new.db')
  if argument.lower() == '—Å—Ç–∞—Ä—ã–µ':
      row = statfuncs.getrandomsong('old.db')
  correctanswer = row[2]
  options = statfuncs.optionsforvic(row[2] , row[3])
  for i , opt in enumerate(options):
   if opt == correctanswer:
       id = i
  await bot.send_voice(message.chat.id , row[1])
  await bot.send_poll(chat_id=message.chat.id, question='–ß—Ç–æ —ç—Ç–æ –∑–∞ –ø–µ—Å–Ω—è üé∂?',
                              is_anonymous=False, options=options, type="quiz",
                              correct_option_id=id , open_period = 20)


@dp.inline_handler() # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
async def inlinesender(inline_query: types.InlineQuery):
    input_content = InputTextMessageContent(f'–í—Å–µ–º –ø—Ä–∏–≤–µ—Çü§ó! –≠—Ç–æ –±–æ—Çü§ñ —É–≥–∞–¥–∞–π-–º–µ–ª–æ–¥–∏—éüé∂! \n–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å‚ûï –≤ –Ω–µ—ë —ç—Ç–æ–≥–æ –±–æ—Ç–∞ü§ñ. \n–ï—Å–ª–∏ –±–æ—Çü§ñ —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –≤–≤–µ–¥–∏—Ç–µ:\n/victorina - –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—éüé∂!\n/victorina –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ) - –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—éüé∂,–≤ –∂–µ–ª–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ‚¨á:\n –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ : –†–æ–∫ü§ò,–ü–æ–øüëØ,–°—Ç–∞—Ä—ã–µüë¥üèª,–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µüë©‚Äçüé§,–í—Å–µ(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n/ifact - –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–µ—Å–Ω—è—Öüéô –∏ –º—É–∑—ã–∫–∞–Ω—Ç–∞—Öüë®‚Äçüé§! \n–í–Ω–∏–º–∞–Ω–∏–µ! –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è :(\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏üìà, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüëâ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—Éü§ñ :)' )
    item = InlineQueryResultArticle(
        id = 1,
        title='–£ –±–æ—Ç–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–µ, –Ω–∞–∂–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π',
        input_message_content=input_content,

    )
    await bot.answer_inline_query(inline_query.id, results=[item],cache_time = 600)

@dp.message_handler(commands = ['setcategory'],state='*')
async def setcategory_1(message: types.Message):
    morkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('–í—Å–µ')
    btn2 = types.KeyboardButton('–†–æ–∫ ü§ò')
    btn3 = types.KeyboardButton('–ü–æ–ø üëØ')
    btn4 = types.KeyboardButton('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ üë©‚Äçüé§')
    btn5 = types.KeyboardButton('–°—Ç–∞—Ä—ã–µ üë¥üèª')
    morkup.add(btn1, btn2 ,btn3 ,btn4 ,btn5)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=morkup)
    await SetCategory.waiting_for_category_name.set()

@dp.message_handler(state=SetCategory.waiting_for_category_name, content_types=types.ContentTypes.TEXT)
async def setcategory_2(message: types.Message , state: FSMContext):
    if message.text.lower() not in SetCategory.available_categories:
        await bot.send_message(message.from_user.id ,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨á.")
        return
    if message.text.lower() == '–≤—Å–µ':
        statfuncs.savecategory('music.db', message.from_user.id)
    if message.text.lower() == '—Ä–æ–∫ ü§ò':
        statfuncs.savecategory('rock.db', message.from_user.id)
    if message.text.lower() == '–ø–æ–ø üëØ':
        statfuncs.savecategory('pop.db', message.from_user.id)
    if message.text.lower() == '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ üë©‚Äçüé§':
        statfuncs.savecategory('new.db', message.from_user.id)
    if message.text.lower() == '—Å—Ç–∞—Ä—ã–µ üë¥üèª':
        statfuncs.savecategory('old.db', message.from_user.id)
    morkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('–ò–≥—Ä–∞—Ç—å –µ—â–µ üòÑ')
    btn2 = types.KeyboardButton('–°—Ç–æ–ø üõë')
    morkup.add(btn1, btn2)
    await bot.send_message(message.from_user.id ,"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üëå" ,reply_markup=morkup)
    await state.finish()


@dp.message_handler(commands=['start'])
async def game(message: types.Message):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    if (statfuncs.currentansreturner(message.from_user.id)[0]) != 3 and (statfuncs.currentansreturner(message.from_user.id)[0]) != 8:
     db_worker = SQLighter(cat.catreturner(message.from_user.id))
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î
     row = db_worker.select_single(random.randint(1, db_worker.count_rows()))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
     markup = utils.generate_markup(row[2], row[3])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
     await bot.send_voice(message.from_user.id, row[1], reply_markup=markup)
    # –í–∫–ª—é—á–∞–µ–º "–∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º"
     utils.set_user_game(message.from_user.id, row[2])
    # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –æ—Ç –ë–î
     db_worker.close()
    else:
        await singerchoose(message)

@dp.message_handler(commands=['singer'])
async def singerchoose(message: types.Message):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    db_worker = SQLighter(config.database_name4)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î
    row = db_worker.select_single(random.randint(1, db_worker.count_rows()))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    markup = utils.generate_markup(row[2], row[3])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    await bot.send_message(message.from_user.id, '–£–≥–∞–¥–∞–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!')
    await bot.send_photo(message.from_user.id, row[1], reply_markup=markup)
    # –í–∫–ª—é—á–∞–µ–º "–∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º"
    utils.set_user_game(message.from_user.id, row[2])
    # –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –æ—Ç –ë–î
    db_worker.close()


@dp.message_handler(commands=['reset'])
async def reset(message: types.Message):
 statfuncs.resetstats(message.from_user.id)

@dp.message_handler(commands=['top'])
async def printtop(message: types.Message):
    tplst = statfuncs.statsreturner(message.from_user.id)
    await bot.send_message(message.from_user.id, f'{tplst[0][0]} (–í—ã) - {tplst[0][1]} –æ—á–∫–æ–≤.')
    for n,i in enumerate(tplst[1:]):
        await bot.send_message(message.from_user.id , f'{n+1}. {list(i)[0]} - {list(i)[1]} –æ—á–∫–æ–≤.')

@dp.message_handler(commands=['dailytop'])
async def printtop(message: types.Message):
    tplst = statfuncs.dailystatsreturner(message.from_user.id)
    await bot.send_message(message.from_user.id, f'{tplst[0][0]} (–í—ã) - {tplst[0][1]} –æ—á–∫–æ–≤.')
    for n,i in enumerate(tplst[1:]):
        await bot.send_message(message.from_user.id , f'{n+1}. {list(i)[0]} - {list(i)[1]} –æ—á–∫–æ–≤.')

'''
@dp.message_handler(commands=['test'])
async def find_file_ids(message):
    path = 'newmusic/'
    files = sorted(os.listdir(path), key=lambda x: os.path.getctime(os.path.join(path, x)))
    for file in files:
            print(file)
            f = open('newmusic/'+file, 'rb')
            msg = await bot.send_voice(message.from_user.id, f, None)
            await bot.send_message(message.from_user.id, msg.voice.file_id, reply_to_message_id=msg.message_id) #–î–ª—è —Ñ–æ—Ç–æ msg.photo[-1].file_id, –¥–ª—è –ø–µ—Å–µ–Ω msg.voice.file_id
    time.sleep(3)
'''

@dp.message_handler(commands=['ifact'])
async def ifacts(message: types.Message):
 rsp = list(random.choice(statfuncs.getinfacts()))
 media = types.MediaGroup()
 media.attach_photo(rsp[0] , rsp[1])
 await bot.send_message(message.chat.id, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: ‚¨á')
 await bot.send_media_group(message.chat.id, media=media)


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ü§ñ:\n–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!\n–í–≤–µ–¥–∏—Ç–µ /setcategory —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Å–µ–Ω üé∂!\n–í–≤–µ–¥–∏—Ç–µ /reset —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìà!\n–í–≤–µ–¥–∏—Ç–µ /top —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ üëë –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è!\n–í–≤–µ–¥–∏—Ç–µ /dailytop —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ üë∏!\n–í–≤–µ–¥–∏—Ç–µ /ifact —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã üìñ!\n–í–≤–µ–¥–∏—Ç–µ /setname —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º üìù\n–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–∞—Ö üë•!\n–î–ª—è —ç—Ç–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ü§ñ –≤ –≥—Ä—É–ø–ø—É.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üíÅ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"@SuddensBot –ª—é–±–æ–π —Ç–µ–∫—Å—Ç" (–ò–Ω–ª–∞–∏–Ω-—Ä–µ–∂–∏–º)')

@dp.message_handler(commands=['setname'] , state='*')
async def nickchange(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è ‚úç')
    await SetCategory.waiting_for_name.set()

@dp.message_handler(state=SetCategory.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def changenick(message : types.Message , state: FSMContext):
    statfuncs.nickchanger(message.from_user.id, message.text)
    await bot.send_message(message.from_user.id, "–ò–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ üìù")
    await state.finish()

@dp.message_handler()
async def check_answer(message: types.Message):
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None -> –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –≤ –∏–≥—Ä–µ
    answer = utils.get_answer_for_user(message.from_user.id)
    if message.text == '–ò–≥—Ä–∞—Ç—å –µ—â–µ üòÑ':
      return await game(message)
    # –ö–∞–∫ –í—ã –ø–æ–º–Ω–∏—Ç–µ, answer –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ None
    # –ï—Å–ª–∏ None:
    if not answer:
        await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    else:
        morkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn1 = types.KeyboardButton('–ò–≥—Ä–∞—Ç—å –µ—â–µ üòÑ')
        btn2 = types.KeyboardButton('–°—Ç–æ–ø üõë')
        morkup.add(btn1, btn2)
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if message.text == answer:
           await bot.send_message(message.from_user.id, '–í–µ—Ä–Ω–æ üéâ!', reply_markup=morkup)
           sp = statfuncs.scoreupdater(message.from_user.id, message.from_user.username,True)
           if sp[4] > 2:
            await bot.send_message(message.from_user.id , f'üéä –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —É–∂–µ {sp[4]} –ø–µ—Å–µ–Ω –ø–æ–¥—Ä—è–¥ ! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤! üéä')
           await bot.send_message(message.from_user.id, f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà:\n–°—á–µ—Ç: {sp[1]}\n–û—Ç–≥–∞–¥–∞–Ω–æ‚úÖ: {sp[2]}\n–ù–µ –æ—Ç–≥–∞–¥–∞–Ω–æ‚ùé: {sp[3]}')

        else:
           await bot.send_message(message.from_user.id, '–£–≤—ã, –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!', reply_markup=morkup)
           sp = statfuncs.scoreupdater(message.from_user.id,message.from_user.username,False)
           await bot.send_message(message.from_user.id, f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà:\n–°—á–µ—Ç: {sp[1]}\n–û—Ç–≥–∞–¥–∞–Ω–æ‚úÖ: {sp[2]}\n–ù–µ –æ—Ç–≥–∞–¥–∞–Ω–æ‚ùé: {sp[3]}')
        # –£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞)
        if sp[6] == 10:
            await ifacts(message)
        utils.finish_user_game(message.from_user.id)



if __name__ == '__main__':
        random.seed()
        executor.start_polling(dp)